library(rpart)
vector
vector90
vector()
x <- c(0.5,0.7)
x <- c(TRUE,FALSE)
x <- vector("numberic",length=10)
x <- vector("numeric",length=10)
x < - 0:6
x<- 0:6
class (x)
as.numeric(x)
as.logical(x)
as.character(x)
m<-matrix(nrow=2,ncol=3)
m
m<-matrix(1:6,nrow=2,ncol=3)
m
m<-1:10
m
dim(m)<-c(2,5)
m
x<-1:3
y<-10:12
cbind(x,y)
rbind(x,y)
cls
ls
rm (m,x,y)
x<-c("a","b")
for (i in 1:2){print(x[i])}
for (i in seq_along(x)){print(x[i])}
for (letter in x){print(x[i])}
for (letter in x){print(letter)}
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(rJava)
library(xlsx)
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_111\\bin')
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_111\\bin')
library(rJava)
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
install.packages("rJava")
install.packages("rJava")
install.packages("xlsx")
library(xlsx)
library(rJava)
Sys.getenv("JAVA_HOME")
library(rJava)
install.packages('rJava',,'http://www.rforge.net/')
install.packages("rJava")
library(rJava)
install.packages("rJava")
library(rJava)
Sys.getenv()
Sys.getenv()
install.packages("installr")
library(installr)
updateR()
swirl（）
library("swirl")
swirl()
swirl()
sample()
sample(x)
sample(document)
sample(10）
?sample
sample(1:6,4,replace=TRUE)
?pbinom
pbinom(4,6,0.16667,lower.tail = TRUE,log.p = FALSE)
pbinom(4,6,0.16667,lower.tail = TRUE,log.p = FALSE)
pbinom(4,6,0.16667,lower.tail = TRUE,log.p = FALSE)
pbinom(4,6,0.16667,lower.tail = TRUE,log.p = FALSE)
quit()
exit
num_sim <- 1000
lamda <- 0.2
n <- 40
sim_matrix <- matrix(rexp(n,rate=lamda),no_sim,n)
sim_matrix <- matrix(rexp(n,rate=lamda),num_sim,n)
View(sim_matrix)
sim_mean <- rowMeans(sim_matrix)
head(sim_mean)
hist(sim_mean,col="blue")
sim_matrix <- matrix(rexp(num_sim*n,rate=lamda),num_sim,n)
sim_mean <- rowMeans(sim_matrix)
hist(sim_mean,col="blue")
View(sim_matrix)
mean_actual <- mean(sim_mean)
mean_theory <- 1/lamda
variance_actual <- var(sim_mean)
variance_theory <- 1/lamda
variance_theory <- (1/lamda)^2/n
variance_theory <- (1/lamda)^2/n
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(runif(1000))
hist(rnrom(1000))
hist(rnorm(1000))
rexp(num_sim*n,rate=lamda)
hist(rexp(num_sim*n,rate=lamda))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(num_sim*n,rate=lamda)))
hist(mns)
original
hist(original)
original<- rexp(num_sim*n,rate=lamda)
hist(original)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(original))
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(original))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(num_sim*n,rate=lamda)))
hist(mns)
plotdata <- data.frame(sim_mean);
m <- ggplot(plotdata, aes(x =sim_mean))
library(ggplot2)
m <- ggplot(plotdata, aes(x =sim_mean))
m <- m + geom_histogram(aes(y=..density..), colour="black",fill = "red")
m + geom_density(colour="blue", size=1)
qqnorm(sim_mean)
qqline(sim_mean)
knitr::opts_chunk$set(echo = TRUE)
# generate ramdom exponential data and calculate the average value
sim_matrix <- matrix(rexp(num_sim*n,rate=lamda),num_sim,n)
sim_mean <- rowMeans(sim_matrix)
mean_actual <- mean(sim_mean)
mean_theory <- 1/lamda
mean_actual_interval <- round (mean(sim_mean) + c(-1,1)*1.96*sd(sim_mean)/sqrt(n),3)
variance_actual_upper <- round(num_sim*n*variance_actual/qchisq(0.975,num_sim*n*variance_actual),3)
variance_actual_upper <- round(num_sim*n*variance_actual/qchisq(0.025,num_sim*n*variance_actual),3)
variance_actual_upper <- round(num_sim*n*variance_actual/qchisq(0.975,num_sim*n*variance_actual),3)
variance_actual_lower <- round(num_sim*n*variance_actual/qchisq(0.025,num_sim*n*variance_actual),3)
library(datasets)
ToothGrowth
originalToothGrowth <- ToothGrowth
View(originalToothGrowth)
ggplot(originalToothGrowth ~ supp)
library(ggplot2)
library(ggplot2)
ggplot(originalToothGrowth ~ supp)
ggplot(originalToothGrowth)
library(datasets)
library(ggplot2)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
xlab("Dose in miligrams") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Supplement type"))
fit <- lm(len ~ dose + supp, data=ToothGrowth)
summary(fit)
ggplot(data=ToothGrowth,aes(x=as.factor(dose),y=len,fill=supp))
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="identity",)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp)
ggplot(data=ToothGrowth, aes(x=as.factor(dose), y=len, fill=supp)) +
geom_bar(stat="identity",) +
facet_grid(. ~ supp) +
xlab("Dose in miligrams") +
ylab("Tooth length") +
guides(fill=guide_legend(title="Supplement type"))
knitr::opts_chunk$set(echo = TRUE)
hypoth1<-t.test(len ~ supp, data = subset(t, dose == 0.5))
hypoth1<-t.test(len ~ supp, data = subset(originalToothGrowth, dose == 0.5))
hypoth1$p.value
hypoth1<-t.test(len ~ supp, data = subset(originalToothGrowth, dose == 0.5))
hypoth1$p.value
hypoth1<-t.test(len ~ supp, data = subset(originalToothGrowth, dose == 1))
hypoth1$p.value
hypoth1<-t.test(len ~ supp, data = subset(originalToothGrowth, dose == 2))
hypoth1$p.value
# We will calculate the interval of actual mean and compare it with theory mean.
# If theory mean is in the interval, it means that actual mean and theory mean are equal.
mean_actual <- mean(sim_mean)
mean_theory <- 1/lamda
round (mean(sim_mean) + c(-1,1)*1.96*sd(sim_mean)/sqrt(n),3)
# We will calculate the interval of ration of (actual variance/theory mean).
# If ratio intervarl includes 1, it means that actual mean and theory mean are equal.
variance_actual <- var(sim_mean)
variance_theory <- (1/lamda)^2/n
round(num_sim*n*variance_actual/qchisq(0.975,num_sim*n*variance_actual),3)
round(num_sim*n*variance_actual/qchisq(0.025,num_sim*n*variance_actual),3)
# generate ramdom exponential data and calculate the average value
sim_matrix <- matrix(rexp(num_sim*n,rate=lamda),num_sim,n)
sim_mean <- rowMeans(sim_matrix)
sim_mean
t.test(len ~ supp, data = subset(originalToothGrowth, dose == 2))
t.test(len ~ supp, data = subset(originalToothGrowth, dose == 1))
t.test(len ~ supp, data = subset(originalToothGrowth, dose == 0.5))
knitr::opts_chunk$set(echo = TRUE)
# set up the working directory
setwd("c:/MyWorkspace/MyLearning/Data Science/Data Science Coursera/RepData_PeerAssessment1")
# load the required library
library (ggplot2)
# loading the data
originalData <- read.table("./activity/activity.csv",sep=",",head = TRUE)
View(originalData)
head(originalData)
table(originalData$steps)\
table(originalData$steps)
knitr::opts_chunk$set(echo = TRUE)
meanPerDay <- tapply(originalData[,2],mean)
step_by_day <- aggregate(originalData ~ date,data,sum)
step_by_day <- aggregate(originalData ~ date,originalData,sum)
step_by_day <- aggregate(steps ~ date,originalData,sum)
View(step_by_day)
step_by_day <- aggregate(steps ~ date,originalData,sum)
summary(step_by_day)
View(step_by_day)
summary(step_by_day$steps)
step_by_day <- aggregate(steps ~ date,originalData,sum)
hist(step_by_day$date, col="red")
step_by_day <- aggregate(steps ~ date,originalData,sum)
hist(step_by_day$steps, col="red")
step_by_day <- aggregate(steps ~ date,originalData,sum)
hist(step_by_day$steps, main = paste("Total Steps Each Day"), col="red",xlab="Number of Steps")
step_by_day <- aggregate(steps ~ date,originalData,sum)
hist(step_by_day$steps, main = paste("Total Steps Each Day"), col="blue",xlab="Number of Steps")
step_by_interval <- aggregate(steps ~ interval, originalData,sum)
step_by_interval <- aggregate(steps ~ interval, originalData,sum)
hist(step_by_interval$steps, main = paste("Total Steps Each Interval"), col="blue",xlab="Number of Steps")
head(step_by_interval)
plot(interval, steps, data=originalData)
plot(interval, steps, data=originalData,type = 1)
plot(originalData$interval, originalData$steps,type = 1)
View(step_by_interval)
